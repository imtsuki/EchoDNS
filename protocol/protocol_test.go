package protocol

import "testing"
import "reflect"

func TestEncodeQueryHeader(t *testing.T) {
	header := Header{
		ID:               0x0b65,
		MessageType:      Query,
		OpCode:           OpCodeQuery,
		Truncation:       false,
		RecursionDesired: true,
		QuestionCount:    1,
	}
	expected := []byte{
		0x0b, 0x65, 0x01, 0x00,
		0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
	}

	if !reflect.DeepEqual(header.Encode(), expected) {
		t.Fail()
	}
}

func TestEncodeResponseHeader(t *testing.T) {
	header := Header{
		ID:                 0x4a5a,
		MessageType:        Response,
		OpCode:             OpCodeQuery,
		Authoritative:      false,
		Truncation:         false,
		RecursionDesired:   true,
		RecursionAvailable: true,
		QuestionCount:      1,
		AnswerCount:        1,
	}
	expected := []byte{
		0x4a, 0x5a, 0x81, 0x80,
		0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00,
	}

	if !reflect.DeepEqual(header.Encode(), expected) {
		t.Fail()
	}
}

func TestDecodeHeader(t *testing.T) {
	expected := Header{
		ID:                 0x4a5a,
		MessageType:        Response,
		OpCode:             OpCodeQuery,
		Authoritative:      false,
		Truncation:         false,
		RecursionDesired:   true,
		RecursionAvailable: true,
		QuestionCount:      1,
		AnswerCount:        1,
	}
	data := []byte{
		0x4a, 0x5a, 0x81, 0x80,
		0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00,
	}
	var header Header
	if !reflect.DeepEqual(header.Decode(data), expected) {
		t.Fail()
	}
	if !reflect.DeepEqual(header, expected) {
		t.Fail()
	}
}

func TestDecodePtr(t *testing.T) {
	data := []byte{
		0xc0, 0x0c,
	}
	if DecodePtr(data) != 0x0c {
		t.Log(DecodePtr(data))
		t.Fail()
	}
}

func TestDecodeName(t *testing.T) {
	data := []byte{
		0x04, 0x6f, 0x63, 0x73,
		0x70, 0x06, 0x64, 0x63,
		0x6f, 0x63, 0x73, 0x70,
		0x02, 0x63, 0x6e, 0x01,
		0x77, 0x08, 0x6b, 0x75,
		0x6e, 0x6c, 0x75, 0x6e,
		0x61, 0x72, 0x03, 0x63,
		0x6f, 0x6d, 0x00,
	}
	expected := "ocsp.dcocsp.cn.w.kunlunar.com."
	if DecodeName(data, 0) != expected {
		t.Fail()
	}
}

func TestCompressedName(t *testing.T) {
	data := []byte{
		0xe3, 0xf4, 0x81, 0x80, 0x00, 0x01, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x04, 0x6f, 0x63, 0x73,
		0x70, 0x08, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65,
		0x72, 0x74, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00,
		0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00,
		0x01, 0x00, 0x01, 0x19, 0x27, 0x00, 0x14, 0x03,
		0x63, 0x73, 0x39, 0x03, 0x77, 0x61, 0x63, 0x06,
		0x70, 0x68, 0x69, 0x63, 0x64, 0x6e, 0x03, 0x6e,
		0x65, 0x74, 0x00, 0xc0, 0x2f, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x0a, 0x66, 0x00, 0x04, 0x75,
		0x12, 0xed, 0x1d,
	}
	expected := "ocsp.digicert.com."
	if DecodeName(data, 35) != expected {
		t.Fail()
	}
	expected = "cs9.wac.phicdn.net."
	if DecodeName(data, 67) != expected {
		t.Fail()
	}
}
